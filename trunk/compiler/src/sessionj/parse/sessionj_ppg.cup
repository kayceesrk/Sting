package sessionj.parse;

import java.util.*;
import java_cup.runtime.*;
import polyglot.ast.*;
import polyglot.lex.*;
import polyglot.util.*;
import polyglot.types.*;
import polyglot.ast.Assert;
import polyglot.parse.*;
import sessionj.SJConstants;
import sessionj.ast.*;
import sessionj.ast.sesscasts.*;
import sessionj.ast.protocoldecls.*;
import sessionj.ast.sessops.*;
import sessionj.ast.sessops.basicops.*;
import sessionj.ast.sessops.compoundops.*;
import sessionj.ast.sessvars.*;
import sessionj.ast.sesstry.*;
import sessionj.ast.typenodes.*;
import sessionj.ast.sessformals.*;
import sessionj.types.*;
import sessionj.util.*;

parser Grm extends polyglot.parse.Grm {:

    public final SJTypeSystem ts;
    public final SJNodeFactory nf;
    
    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (SJTypeSystem) t;
        nf = (SJNodeFactory) n;
        
        //RAY
        ((SJNodeFactory) nf).setExtensionInfo(ts.extensionInfo());
        
    		try 
    		{
    			SJConstants.SJ_PROTOCOL_TYPE = ts.typeForName(SJConstants.SJ_PROTOCOL_CLASS);
    			SJConstants.SJ_CHANNEL_TYPE = ts.typeForName(SJConstants.SJ_CHANNEL_CLASS);
    			SJConstants.SJ_SOCKET_INTERFACE_TYPE = ts.typeForName(SJConstants.SJ_SOCKET_INTERFACE);		
    			SJConstants.SJ_ABSTRACT_SOCKET_TYPE = ts.typeForName(SJConstants.SJ_ABSTRACT_SOCKET_CLASS);
    			SJConstants.SJ_SERVER_INTERFACE_TYPE = ts.typeForName(SJConstants.SJ_SERVER_INTERFACE);		
    			SJConstants.SJ_SERVER_TYPE = ts.typeForName(SJConstants.SJ_SERVER_CLASS);
    			SJConstants.SJ_LABEL_TYPE = ts.typeForName(SJConstants.SJ_LABEL_CLASS);
    			SJConstants.SJ_RUNTIME_TYPE = ts.typeForName(SJConstants.SJ_RUNTIME_CLASS);
    			SJConstants.SJ_THREAD_TYPE = ts.typeForName(SJConstants.SJ_THREAD_CLASS);
    			SJConstants.SJ_ABSTRACT_CHANNEL_TYPE = ts.typeForName(SJConstants.SJ_ABSTRACT_CHANNEL_CLASS);
    			SJConstants.SJ_CHANNEL_SOCKET_HACK_TYPE = ts.typeForName(SJConstants.SJ_CHANNEL_SOCKET_HACK_CLASS);
    			SJConstants.SJ_SELECTOR_INTERFACE_TYPE = ts.typeForName(SJConstants.SJ_SELECTOR_INTERFACE);
			//<By MQ> For our newly defined types
			SJConstants.SJ_GPROTOCOL_TYPE = ts.typeForName(SJConstants.SJ_GPROTOCOL_CLASS);
			//</By MQ>
    		}
    		catch (SemanticException se) 
    		{		
    			throw new RuntimeException("[sessionj.ppg] " + se);
    		}
    		//YAR        
    }

    static List<Receiver> asRecvList(Name n) {
        List<Receiver> l = new LinkedList<Receiver>();
        l.add(n.toReceiver());
        return l;
    }

    public Position pos(Object first, Object last) {
        Position pos = super.pos(first, last);
        if (pos == null) pos = Position.COMPILER_GENERATED;
        return pos;
    }

:}
scan with {: return nextSymbol(); :};
terminal Token BOOLEAN;
terminal Token BYTE, SHORT, INT, LONG, CHAR;
terminal Token FLOAT, DOUBLE;
terminal Token LBRACK, RBRACK;
terminal Identifier IDENTIFIER;
terminal Token DOT;
terminal Token SEMICOLON, MULT, COMMA, LBRACE, RBRACE, EQ;
terminal Token LPAREN, RPAREN, COLON;
terminal Token PACKAGE;
terminal Token IMPORT;
terminal Token PUBLIC, PROTECTED, PRIVATE;
terminal Token STATIC;
terminal Token ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT, VOLATILE;
terminal Token CLASS;
terminal Token EXTENDS;
terminal Token IMPLEMENTS;
terminal Token VOID;
terminal Token THROWS;
terminal Token THIS, SUPER;
terminal Token INTERFACE;
terminal Token IF, ELSE;
terminal Token SWITCH;
terminal Token CASE, DEFAULT;
terminal Token DO, WHILE;
terminal Token FOR;
terminal Token BREAK;
terminal Token CONTINUE;
terminal Token RETURN;
terminal Token THROW;
terminal Token TRY;
terminal Token CATCH;
terminal Token FINALLY;
terminal Token NEW;
terminal Token PLUSPLUS;
terminal Token MINUSMINUS;
terminal Token PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal Token LSHIFT, RSHIFT, URSHIFT;
terminal Token LT, GT, LTEQ, GTEQ, INSTANCEOF;
terminal Token EQEQ, NOTEQ;
terminal Token AND;
terminal Token XOR;
terminal Token OR;
terminal Token ANDAND;
terminal Token OROR;
terminal Token QUESTION;
terminal Token MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ;
terminal Token LSHIFTEQ, RSHIFTEQ, URSHIFTEQ;
terminal Token ANDEQ, XOREQ, OREQ;
terminal polyglot.lex.IntegerLiteral INTEGER_LITERAL;
terminal polyglot.lex.IntegerLiteral INTEGER_LITERAL_BD;
terminal polyglot.lex.LongLiteral LONG_LITERAL;
terminal polyglot.lex.LongLiteral LONG_LITERAL_BD;
terminal polyglot.lex.DoubleLiteral DOUBLE_LITERAL;
terminal polyglot.lex.FloatLiteral FLOAT_LITERAL;
terminal polyglot.lex.BooleanLiteral BOOLEAN_LITERAL;
terminal polyglot.lex.CharacterLiteral CHARACTER_LITERAL;
terminal polyglot.lex.StringLiteral STRING_LITERAL;
terminal polyglot.lex.NullLiteral NULL_LITERAL;
terminal Token STRICTFP;
terminal Token ASSERT;
terminal CONST, GOTO;
non terminal SourceFile goal;
non terminal polyglot.ast.Lit literal;
non terminal polyglot.ast.Lit boundary_literal;
non terminal TypeNode type, primitive_type, numeric_type;
non terminal TypeNode integral_type, floating_point_type;
non terminal TypeNode reference_type;
non terminal TypeNode class_or_interface_type;
non terminal TypeNode class_type, interface_type;
non terminal TypeNode array_type;
non terminal Name name, simple_name, qualified_name;
non terminal SourceFile compilation_unit;
non terminal PackageNode package_declaration_opt, package_declaration;
non terminal List import_declarations_opt, import_declarations;
non terminal List type_declarations_opt, type_declarations;
non terminal Import import_declaration;
non terminal Import single_type_import_declaration;
non terminal Import type_import_on_demand_declaration;
non terminal ClassDecl type_declaration;
non terminal Flags modifiers_opt, modifiers, modifier;
non terminal ClassDecl class_declaration;
non terminal TypeNode super, super_opt;
non terminal List interfaces, interfaces_opt, interface_type_list;
non terminal ClassBody class_body;
non terminal List class_body_declarations, class_body_declarations_opt;
non terminal List class_body_declaration, class_member_declaration;
non terminal List field_declaration;
non terminal List variable_declarators;
non terminal VarDeclarator variable_declarator;
non terminal VarDeclarator variable_declarator_id;
non terminal Expr variable_initializer;
non terminal MethodDecl method_declaration, method_header;
non terminal List formal_parameter_list_opt, formal_parameter_list;
non terminal Formal formal_parameter;
non terminal List throws_opt, throws;
non terminal List class_type_list;
non terminal Block method_body;
non terminal Block static_initializer;
non terminal ConstructorDecl constructor_declaration;
non terminal Block constructor_body;
non terminal ConstructorCall explicit_constructor_invocation;
non terminal ClassDecl interface_declaration;
non terminal List extends_interfaces_opt, extends_interfaces;
non terminal ClassBody interface_body;
non terminal List interface_member_declarations_opt, interface_member_declarations;
non terminal List interface_member_declaration;
non terminal List constant_declaration;
non terminal MethodDecl abstract_method_declaration;
non terminal ArrayInit array_initializer;
non terminal List variable_initializers;
non terminal Block block;
non terminal List block_statements_opt, block_statements;
non terminal List block_statement;
non terminal List local_variable_declaration_statement;
non terminal List local_variable_declaration;
non terminal Stmt statement, statement_no_short_if;
non terminal Stmt statement_without_trailing_substatement;
non terminal Empty empty_statement;
non terminal Labeled labeled_statement, labeled_statement_no_short_if;
non terminal Stmt expression_statement;
non terminal Expr statement_expression;
non terminal If if_then_statement;
non terminal If if_then_else_statement, if_then_else_statement_no_short_if;
non terminal Switch switch_statement;
non terminal List switch_block, switch_block_statement_groups;
non terminal List switch_block_statement_group, switch_labels;
non terminal Case switch_label;
non terminal While while_statement, while_statement_no_short_if;
non terminal Do do_statement;
non terminal For for_statement, for_statement_no_short_if;
non terminal List for_init_opt, for_init;
non terminal List for_update_opt, for_update;
non terminal List statement_expression_list;
non terminal Name identifier_opt;
non terminal Branch break_statement, continue_statement;
non terminal Return return_statement;
non terminal Throw throw_statement;
non terminal Synchronized synchronized_statement;
non terminal Try try_statement;
non terminal List catches_opt, catches;
non terminal Catch catch_clause;
non terminal Block finally;
non terminal Assert assert_statement;
non terminal Expr primary, primary_no_new_array;
non terminal Expr class_instance_creation_expression;
non terminal List argument_list_opt, argument_list;
non terminal NewArray array_creation_expression;
non terminal List dim_exprs;
non terminal Expr dim_expr;
non terminal Integer dims_opt, dims;
non terminal Field field_access;
non terminal Call method_invocation;
non terminal ArrayAccess array_access;
non terminal Expr postfix_expression;
non terminal Unary postincrement_expression, postdecrement_expression;
non terminal Expr unary_expression, unary_expression_not_plus_minus;
non terminal Unary preincrement_expression, predecrement_expression;
non terminal Cast cast_expression;
non terminal Expr multiplicative_expression, additive_expression;
non terminal Expr shift_expression, relational_expression, equality_expression;
non terminal Expr and_expression, exclusive_or_expression, inclusive_or_expression;
non terminal Expr conditional_and_expression, conditional_or_expression;
non terminal Expr conditional_expression, assignment_expression;
non terminal Expr assignment;
non terminal Expr left_hand_side;
non terminal Assign.Operator assignment_operator;
non terminal Expr expression_opt, expression;
non terminal Expr constant_expression;
terminal Token SJ_NOALIAS;
terminal Token SJ_PROTOCOL;
terminal Token SJ_CBEGIN;
terminal Token SJ_SEND;
terminal Token SJ_PASS;
terminal Token SJ_COPY;
terminal Token SJ_RECEIVE;
terminal Token SJ_RECEIVEINT;
terminal Token SJ_RECEIVEBOOLEAN;
terminal Token SJ_RECEIVEDOUBLE;
terminal Token SJ_REC;
terminal Token SJ_RECURSE;
terminal Token SJ_OUTBRANCH;
terminal Token SJ_INBRANCH;
terminal Token SJ_OUTWHILE;
terminal Token SJ_NEWOUTWHILE;
terminal Token SJ_INWHILE;
terminal Token SJ_RECURSION;
terminal Token SJ_TYPECASE;
terminal Token SJ_WHEN;
terminal Token SJ_SPAWN;
terminal Token SJ_RECURSE_LABEL;
terminal Token SJ_PROTOCOL_REF;
terminal Token SJ_GPROTOCOL;
terminal Token SJ_PARTICIPANTS;
terminal Token SJ_PARTICIPANT;
non terminal SJTypeNode sj_session_type;
non terminal SJCBeginNode sj_session_type_cbegin;
non terminal SJSBeginNode sj_session_type_sbegin;
non terminal SJTypeNode sj_channel_type;
non terminal SJTypeNode sj_server_type;
non terminal SJTypeNode sj_session_type_body;
non terminal SJTypeNode sj_session_type_element;
non terminal List sj_branch_cases;
non terminal SJBranchCaseNode sj_branch_case;
non terminal TypeNode sj_message_type;
non terminal List sj_session_set_type_body;
non terminal SJTypeNode sj_session_set_type;
non terminal SJFieldProtocolDecl sj_field_protocol_declaration;
non terminal SJLocalProtocolDecl sj_protocol_declaration_statement;
non terminal SJAmbiguousTry sj_try_statement;
non terminal SJBasicOperation sj_basic_operation;
non terminal SJSend sj_send_operation;
non terminal SJPass sj_pass_operation;
non terminal SJCopy sj_copy_operation;
non terminal SJReceive sj_receive_operation;
non terminal SJReceive sj_receiveint_operation;
non terminal SJReceive sj_receiveboolean_operation;
non terminal SJReceive sj_receivedouble_operation;
non terminal SJRecurse sj_recurse_operation;
non terminal SJSpawn sj_spawn_operation;
non terminal List sj_socket_list;
non terminal Receiver sj_socket;
non terminal SJCompoundOperation sj_structural_operation;
non terminal SJOutbranch sj_outbranch_statement;
non terminal SJInbranch sj_inbranch_statement;
non terminal List sj_inbranch_cases;
non terminal SJInbranchCase sj_inbranch_case;
non terminal SJOutwhile sj_outwhile_statement;
non terminal SJOutwhile sj_newoutwhile_statement;
non terminal SJOutInwhile sj_outinwhile_statement;
non terminal SJInwhile sj_inwhile_statement;
non terminal SJRecursion sj_recursion_statement;
non terminal SJTypecase sj_typecase_statement;
non terminal List sj_typecase_caselist;
non terminal SJWhen sj_typecase_when;
non terminal SJSessionTypeCast sj_session_type_cast_expression;
non terminal SJFormal sj_formal;
non terminal SJFormal sj_channel_formal;
non terminal SJFormal sj_session_formal;
non terminal SJFormal sj_server_formal;
non terminal Object optional_final_noalias;
non terminal List sj_message_type_list;
non terminal SJFieldProtocolDecl sj_field_gprotocol_declaration;
non terminal SJLocalProtocolDecl sj_gprotocol_declaration_statement;
non terminal SJTypeNode sj_gsession_type;
non terminal SJTypeNode sj_gsession_type_body;
non terminal SJTypeNode sj_gsession_type_element;
non terminal List sj_gsession_set_type_body;
non terminal SJTypeNode sj_gsession_set_type;
non terminal TypeNode sj_gmessage_type;
non terminal List sj_gmessage_type_list;
non terminal List sj_gbranch_cases;
non terminal SJBranchCaseNode sj_gbranch_case;
non terminal SJTypeNode sj_gbegin_type;
non terminal SJBeginNode sj_session_type_gbegin;
non terminal List sj_identifier_list;
non terminal SJParticipantsNode sj_participants_type;
non terminal SJTypeNode sj_field_participant_declaration;


start with goal;

goal ::=
    compilation_unit:a {:
                       if (parser.eq.hasErrors()) RESULT = null;
               else RESULT = a; 
                       :};

literal ::=
    INTEGER_LITERAL:a {:
                      RESULT = parser.nf.IntLit(parser.pos(a), IntLit.INT,
                                     a.getValue().intValue()); 
                      :}
 |  LONG_LITERAL:a {:
                   RESULT = parser.nf.IntLit(parser.pos(a), IntLit.LONG,
                     a.getValue().longValue()); 
                   :}
 |  DOUBLE_LITERAL:a {:
                     RESULT = parser.nf.FloatLit(parser.pos(a), FloatLit.DOUBLE,
                                           a.getValue().doubleValue()); 
                     :}
 |  FLOAT_LITERAL:a {:
                    RESULT = parser.nf.FloatLit(parser.pos(a), FloatLit.FLOAT,
                                           a.getValue().floatValue()); 
                    :}
 |  BOOLEAN_LITERAL:a {:
                      RESULT = parser.nf.BooleanLit(parser.pos(a),
                                         a.getValue().booleanValue()); 
                      :}
 |  CHARACTER_LITERAL:a {:
                        RESULT = parser.nf.CharLit(parser.pos(a),
                      a.getValue().charValue()); 
                        :}
 |  STRING_LITERAL:a {:
                     RESULT = parser.nf.StringLit(parser.pos(a), a.getValue()); 
                     :}
 |  NULL_LITERAL:a {:  RESULT = parser.nf.NullLit(parser.pos(a));  :};

boundary_literal ::=
    INTEGER_LITERAL_BD:a {:
                         RESULT = parser.nf.IntLit(parser.pos(a), IntLit.INT,
                                     a.getValue().intValue()); 
                         :}
 |  LONG_LITERAL_BD:a {:
                      RESULT = parser.nf.IntLit(parser.pos(a), IntLit.LONG,
                     a.getValue().longValue()); 
                      :};

type ::=
    primitive_type:a {:  RESULT = a;  :}
 |  reference_type:a {:  RESULT = a;  :}
 |  SJ_NOALIAS:a reference_type:n {:
                                 			
		if (n instanceof AmbTypeNode)
		{
			RESULT = parser.nf.SJAmbNoAliasTypeNode(parser.pos(a, n), (AmbTypeNode) n);
		}
		else if (n instanceof ArrayTypeNode) // Actually, doesn't serve much purpose, could just use the same ambiguous type node for both.
		{
			RESULT = parser.nf.SJNoAliasArrayTypeNode(parser.pos(a, n), (ArrayTypeNode) n);
		}
		else if (n instanceof CanonicalTypeNode) // Primitive arrays. Anything else?
		{
			RESULT = parser.nf.SJNoAliasCanonicalTypeNode(parser.pos(a, n), (CanonicalTypeNode) n); // FIXME: currently hacked in.
		}
		else
		{
			throw new RuntimeException("[SJ parser] Unexpected TypeNode (" + n.getClass() + "): " + n);
		}				
	
                                  :};

primitive_type ::=
    numeric_type:a {:  RESULT = a;  :}
 |  BOOLEAN:a {:
              RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Boolean()); 
              :};

numeric_type ::=
    integral_type:a {:  RESULT = a;  :}
 |  floating_point_type:a {:  RESULT = a;  :};

integral_type ::=
    BYTE:a {:
           RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Byte()); 
           :}
 |  CHAR:a {:
           RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Char()); 
           :}
 |  SHORT:a {:
            RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Short()); 
            :}
 |  INT:a {:
          RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Int()); 
          :}
 |  LONG:a {:
           RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Long()); 
           :};

floating_point_type ::=
    FLOAT:a {:
            RESULT = parser.nf.CanonicalTypeNode(parser.pos(a),
                       parser.ts.Float()); 
            :}
 |  DOUBLE:a {:
             RESULT = parser.nf.CanonicalTypeNode(parser.pos(a),
                       parser.ts.Double()); 
             :};

reference_type ::=
    class_or_interface_type:a {:  RESULT = a;  :}
 |  array_type:a {:  RESULT = a;  :};

class_or_interface_type ::=
    name:a {:  RESULT = a.toType();  :};

class_type ::=
    class_or_interface_type:a {:  RESULT = a;  :};

interface_type ::=
    class_or_interface_type:a {:  RESULT = a;  :};

array_type ::=
    primitive_type:a dims:b {:  RESULT = parser.array(a, b.intValue());  :}
 |  name:a dims:b {:  RESULT = parser.array(a.toType(), b.intValue());  :};

name ::=
    simple_name:a {:  RESULT = a;  :}
 |  qualified_name:a {:  RESULT = a;  :};

simple_name ::=
    IDENTIFIER:a {:
                 RESULT = new Name(parser.nf, parser.ts, parser.pos(a), parser.nf.Id(parser.pos(a), a.getIdentifier())); 
                 :};

qualified_name ::=
    name:a DOT IDENTIFIER:b {:
                            RESULT = new Name(parser.nf, parser.ts, parser.pos(a, b), a, parser.nf.Id(parser.pos(b), b.getIdentifier())); 
                            :};

compilation_unit ::=
    package_declaration_opt:a import_declarations_opt:b type_declarations_opt:c {:
                                                                                RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
					     a, b, c);
	    
                                                                                :}
 |  error type_declarations_opt:c {:
                                  RESULT = parser.nf.SourceFile(new Position(parser.lexer.path(), parser.lexer.file()),
					     null, Collections.EMPTY_LIST, c);
	    
                                  :};

package_declaration_opt ::=
    package_declaration:a {:  RESULT = a;  :}
 |  {:  RESULT = null;  :};

import_declarations_opt ::=
    import_declarations:a {:  RESULT = a;  :}
 |  {:  RESULT = new TypedList(new LinkedList(), Import.class, false);  :};

type_declarations_opt ::=
    type_declarations:a {:  RESULT = a;  :}
 |  {:
    RESULT = new TypedList(new LinkedList(), TopLevelDecl.class, false); 
    :};

import_declarations ::=
    import_declaration:a {:
                         List l = new TypedList(new LinkedList(), Import.class, false); 
               l.add(a);
               RESULT = l; 
                         :}
 |  import_declarations:a import_declaration:b {:
                                               RESULT = a; 
               a.add(b); 
                                               :};

type_declarations ::=
    type_declaration:a {:
                       List l = new TypedList(new LinkedList(), TopLevelDecl.class, false); 
               if (a != null)
                   l.add(a);
               RESULT = l; 
                       :}
 |  type_declarations:a type_declaration:b {:
                                           RESULT = a;
               if (b != null)
                   a.add(b); 
                                           :};

package_declaration ::=
    PACKAGE name:a SEMICOLON {:  RESULT = a.toPackage();  :};

import_declaration ::=
    single_type_import_declaration:a {:  RESULT = a;  :}
 |  type_import_on_demand_declaration:a {:  RESULT = a;  :};

single_type_import_declaration ::=
    IMPORT:a qualified_name:b SEMICOLON:c {:
                                          RESULT = parser.nf.Import(parser.pos(a, c), Import.CLASS, b.toString()); 
                                          :};

type_import_on_demand_declaration ::=
    IMPORT:a name:b DOT MULT SEMICOLON:c {:
                                         RESULT = parser.nf.Import(parser.pos(a, c), Import.PACKAGE, b.toString()); 
                                         :};

type_declaration ::=
    class_declaration:a {:  RESULT = a;  :}
 |  interface_declaration:a {:  RESULT = a;  :}
 |  SEMICOLON {:  RESULT = null;  :};

modifiers_opt ::=
    {:  RESULT = Flags.NONE;  :}
 |  modifiers:a {:  RESULT = a;  :};

modifiers ::=
    modifier:a {:  RESULT = a;  :}
 |  modifiers:a modifier:b {:
                           if (a.intersects(b)) parser.die(parser.position());
               RESULT = a.set(b); 
                           :};

modifier ::=
    PUBLIC:a {:  RESULT = Flags.PUBLIC;  :}
 |  PROTECTED:a {:  RESULT = Flags.PROTECTED;  :}
 |  PRIVATE:a {:  RESULT = Flags.PRIVATE;  :}
 |  STATIC:a {:  RESULT = Flags.STATIC;  :}
 |  ABSTRACT:a {:  RESULT = Flags.ABSTRACT;  :}
 |  FINAL:a {:  RESULT = Flags.FINAL;  :}
 |  NATIVE:a {:  RESULT = Flags.NATIVE;  :}
 |  SYNCHRONIZED:a {:  RESULT = Flags.SYNCHRONIZED;  :}
 |  TRANSIENT:a {:  RESULT = Flags.TRANSIENT;  :}
 |  VOLATILE:a {:  RESULT = Flags.VOLATILE;  :}
 |  STRICTFP:a {:  RESULT = Flags.STRICTFP;  :};

class_declaration ::=
    modifiers_opt:a CLASS:n IDENTIFIER:b super_opt:c interfaces_opt:d class_body:e {:
                                                                                   RESULT = parser.nf.ClassDecl(parser.pos(n, e),
                a, parser.nf.Id(parser.pos(b), b.getIdentifier()), c, d, e); 
                                                                                   :};

super ::=
    EXTENDS class_type:a {:  RESULT = a;  :};

super_opt ::=
   
 |  super:a {:  RESULT = a;  :};

interfaces ::=
    IMPLEMENTS interface_type_list:a {:  RESULT = a;  :};

interfaces_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), TypeNode.class, false);  :}
 |  interfaces:a {:  RESULT = a;  :};

interface_type_list ::=
    interface_type:a {:
                     List l = new TypedList(new LinkedList(), TypeNode.class, false);
               l.add(a);
               RESULT = l; 
                     :}
 |  interface_type_list:a COMMA interface_type:b {:
                                                 RESULT = a;
               a.add(b); 
                                                 :};

class_body ::=
    LBRACE:n class_body_declarations_opt:a RBRACE:b {:
                                                    RESULT = parser.nf.ClassBody(parser.pos(n, b), a); 
                                                    :};

class_body_declarations_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), ClassMember.class, false);  :}
 |  class_body_declarations:a {:  RESULT = a;  :};

class_body_declarations ::=
    class_body_declaration:a {:  RESULT = a;  :}
 |  class_body_declarations:a class_body_declaration:b {:
                                                       RESULT = a;
               a.addAll(b); 
                                                       :};

class_body_declaration ::=
    class_member_declaration:a {:  RESULT = a;  :}
 |  static_initializer:a {:
                         List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(parser.nf.Initializer(parser.pos(a), Flags.STATIC, a));
               RESULT = l; 
                         :}
 |  constructor_declaration:a {:
                              List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                              :}
 |  block:a {:
            List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(parser.nf.Initializer(parser.pos(a), Flags.NONE, a));
               RESULT = l; 
            :}
 |  SEMICOLON {:
              List l = new TypedList(new LinkedList(), ClassMember.class, false);
               RESULT = l; 
              :}
 |  error SEMICOLON:a {:
                      List l = new TypedList(new LinkedList(), ClassMember.class, false);
               RESULT = l; 
                      :}
 |  error LBRACE:a {:
                   List l = new TypedList(new LinkedList(), ClassMember.class, false);
               RESULT = l; 
                   :};

class_member_declaration ::=
    field_declaration:a {:  RESULT = a;  :}
 |  method_declaration:a {:
                         List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                         :}
 |  modifiers_opt:a CLASS:n IDENTIFIER:b super_opt:c interfaces_opt:d class_body:e {:
                                                                                   List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(parser.nf.ClassDecl(parser.pos(n, e),
                        a, parser.nf.Id(parser.pos(b), b.getIdentifier()), c, d, e));
               RESULT = l; 
                                                                                   :}
 |  interface_declaration:a {:
                            List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                            :}
 |  sj_field_protocol_declaration:a {:
                                   
		List l = new TypedList(new LinkedList(), ClassMember.class, false);
	        l.add(a);
		RESULT = l;
	
                                    :}
 |  sj_field_participant_declaration:a {:
                                      
                List l = new TypedList(new LinkedList(), ClassMember.class, false);
                RESULT = l;
        
                                       :}
 |  sj_field_gprotocol_declaration:a {:
                                    
		List l = new TypedList(new LinkedList(), ClassMember.class, false);
	        l.add(a);
		RESULT = l;
	
                                     :};

field_declaration ::=
    modifiers_opt:a type:b variable_declarators:c SEMICOLON:e {:
                                                              List l = new TypedList(new LinkedList(), ClassMember.class, false);
               for (Iterator i = c.iterator(); i.hasNext(); ) {
                   VarDeclarator d = (VarDeclarator) i.next();
                   l.add(parser.nf.FieldDecl(parser.pos(b, e),
                                             a, parser.array(b, d.dims),
                                             d.name, d.init));
               }
               RESULT = l; 
                                                              :};

variable_declarators ::=
    variable_declarator:a {:
                          List l = new TypedList(new LinkedList(), VarDeclarator.class, false);
               l.add(a);
               RESULT = l; 
                          :}
 |  variable_declarators:a COMMA variable_declarator:b {:
                                                       RESULT = a;
               a.add(b); 
                                                       :};

variable_declarator ::=
    variable_declarator_id:a {:  RESULT = a;  :}
 |  variable_declarator_id:a EQ variable_initializer:b {:
                                                       RESULT = a;
               a.init = b; 
                                                       :};

variable_declarator_id ::=
    IDENTIFIER:a {:
                 RESULT = new VarDeclarator(parser.pos(a),
                            parser.nf.Id(parser.pos(a), a.getIdentifier())); 
                 :}
 |  variable_declarator_id:a LBRACK RBRACK {:
                                           RESULT = a;
               a.dims++; 
                                           :};

variable_initializer ::=
    expression:a {:  RESULT = a;  :}
 |  array_initializer:a {:  RESULT = a;  :};

method_declaration ::=
    method_header:a method_body:b {:  RESULT = (MethodDecl) a.body(b);  :};

method_header ::=
    modifiers_opt:a type:b IDENTIFIER:c LPAREN formal_parameter_list_opt:d RPAREN:g dims_opt:e throws_opt:f {:
                                                                                                            RESULT = parser.nf.MethodDecl(parser.pos(b, g, c), a,
                parser.array(b, e.intValue()), parser.nf.Id(parser.pos(c), c.getIdentifier()),
                d, f, null); 
                                                                                                            :}
 |  modifiers_opt:a VOID:b IDENTIFIER:c LPAREN formal_parameter_list_opt:d RPAREN:g throws_opt:f {:
                                                                                                 RESULT = parser.nf.MethodDecl(parser.pos(b, g, c), a,
                parser.nf.CanonicalTypeNode(parser.pos(b),
                parser.ts.Void()), parser.nf.Id(parser.pos(c), c.getIdentifier()), d, f, null); 
                                                                                                 :};

formal_parameter_list_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), Formal.class, false);  :}
 |  formal_parameter_list:a {:  RESULT = a;  :};

formal_parameter_list ::=
    formal_parameter:a {:
                       List l = new TypedList(new LinkedList(), Formal.class, false);
               l.add(a);
               RESULT = l; 
                       :}
 |  formal_parameter_list:a COMMA formal_parameter:b {:
                                                     RESULT = a;
               a.add(b); 
                                                     :};

formal_parameter ::=
    type:a variable_declarator_id:b {:
                                    RESULT = parser.nf.Formal(parser.pos(a, b, b), Flags.NONE,
                                         parser.array(a, b.dims), b.name); 
                                    :}
 |  FINAL type:a variable_declarator_id:b {:
                                          RESULT = parser.nf.Formal(parser.pos(a, b, b), Flags.FINAL,
                     parser.array(a, b.dims), b.name); 
                                          :}
 |  sj_formal:a {: 
		RESULT = a;
	 :};

throws_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), TypeNode.class, false);  :}
 |  throws:a {:  RESULT = a;  :};

throws ::=
    THROWS class_type_list:a {:  RESULT = a;  :};

class_type_list ::=
    class_type:a {:
                 List l = new TypedList(new LinkedList(), TypeNode.class, false);
               l.add(a);
               RESULT = l; 
                 :}
 |  class_type_list:a COMMA class_type:b {:
                                         RESULT = a;
               a.add(b); 
                                         :};

method_body ::=
    block:a {:  RESULT = a;  :}
 |  SEMICOLON {:  RESULT = null;  :};

static_initializer ::=
    STATIC block:a {:  RESULT = a;  :};

constructor_declaration ::=
    modifiers_opt:m simple_name:a LPAREN formal_parameter_list_opt:b RPAREN throws_opt:c constructor_body:d {:
                                                                                                            RESULT = parser.nf.ConstructorDecl(parser.pos(a, d), m, parser.nf.Id(parser.pos(a), a.toString()), b,
                c, d); 
                                                                                                            :};

constructor_body ::=
    LBRACE:n explicit_constructor_invocation:a block_statements:b RBRACE:d {:
                                                                           List l = new TypedList(new LinkedList(), Stmt.class, false);
               l.add(a);
               l.addAll(b);
               RESULT = parser.nf.Block(parser.pos(n, d), l); 
                                                                           :}
 |  LBRACE:n explicit_constructor_invocation:a RBRACE:d {:
                                                        RESULT = parser.nf.Block(parser.pos(n, d), a); 
                                                        :}
 |  LBRACE:n block_statements:a RBRACE:d {:
                                         a.add(0, parser.nf.SuperCall(parser.pos(n, d), 
                Collections.EMPTY_LIST));
               RESULT = parser.nf.Block(parser.pos(n, d), a); 
                                         :}
 |  LBRACE:n RBRACE:d {:
                      RESULT = parser.nf.Block(parser.pos(n, d),
                parser.nf.SuperCall(parser.pos(n, d),
                Collections.EMPTY_LIST)); 
                      :};

explicit_constructor_invocation ::=
    THIS:a LPAREN argument_list_opt:b RPAREN SEMICOLON:c {:
                                                         RESULT = parser.nf.ThisCall(parser.pos(a, c), b); 
                                                         :}
 |  SUPER:a LPAREN argument_list_opt:b RPAREN SEMICOLON:c {:
                                                          RESULT = parser.nf.SuperCall(parser.pos(a, c), b); 
                                                          :}
 |  primary:a DOT THIS:n LPAREN argument_list_opt:b RPAREN SEMICOLON:c {:
                                                                       RESULT = parser.nf.ThisCall(parser.pos(a, c, n), a, b); 
                                                                       :}
 |  primary:a DOT SUPER:n LPAREN argument_list_opt:b RPAREN SEMICOLON:c {:
                                                                        RESULT = parser.nf.SuperCall(parser.pos(a, c, n), a, b); 
                                                                        :};

interface_declaration ::=
    modifiers_opt:a INTERFACE:n IDENTIFIER:b extends_interfaces_opt:c interface_body:d {:
                                                                                       RESULT = parser.nf.ClassDecl(
                    parser.pos(n, d), a.Interface(),
                        parser.nf.Id(parser.pos(b), b.getIdentifier()), null, c, d); 
                                                                                       :};

extends_interfaces_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), TypeNode.class, false);  :}
 |  extends_interfaces:a {:  RESULT = a;  :};

extends_interfaces ::=
    EXTENDS interface_type:a {:
                             List l = new TypedList(new LinkedList(), TypeNode.class, false);
               l.add(a);
               RESULT = l; 
                             :}
 |  extends_interfaces:a COMMA interface_type:b {:
                                                RESULT = a;
               a.add(b); 
                                                :};

interface_body ::=
    LBRACE:n interface_member_declarations_opt:a RBRACE:d {:
                                                          RESULT = parser.nf.ClassBody(parser.pos(n, d), a); 
                                                          :};

interface_member_declarations_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), ClassMember.class, false);  :}
 |  interface_member_declarations:a {:  RESULT = a;  :};

interface_member_declarations ::=
    interface_member_declaration:a {:  RESULT = a;  :}
 |  interface_member_declarations:a interface_member_declaration:b {:
                                                                   RESULT = a;
               a.addAll(b); 
                                                                   :};

interface_member_declaration ::=
    constant_declaration:a {:  RESULT = a;  :}
 |  abstract_method_declaration:a {:
                                  List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                                  :}
 |  class_declaration:a {:
                        List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                        :}
 |  interface_declaration:a {:
                            List l = new TypedList(new LinkedList(), ClassMember.class, false);
               l.add(a);
               RESULT = l; 
                            :}
 |  SEMICOLON {:  RESULT = Collections.EMPTY_LIST;  :};

constant_declaration ::=
    field_declaration:a {:  RESULT = a;  :};

abstract_method_declaration ::=
    method_header:a SEMICOLON {:  RESULT = a;  :};

array_initializer ::=
    LBRACE:n variable_initializers:a COMMA RBRACE:d {:
                                                    RESULT = parser.nf.ArrayInit(parser.pos(n, d), a); 
                                                    :}
 |  LBRACE:n variable_initializers:a RBRACE:d {:
                                              RESULT = parser.nf.ArrayInit(parser.pos(n, d), a); 
                                              :}
 |  LBRACE:n COMMA RBRACE:d {:
                            RESULT = parser.nf.ArrayInit(parser.pos(n, d)); 
                            :}
 |  LBRACE:n RBRACE:d {:  RESULT = parser.nf.ArrayInit(parser.pos(n, d));  :};

variable_initializers ::=
    variable_initializer:a {:
                           List l = new TypedList(new LinkedList(), Expr.class, false);
           l.add(a);
           RESULT = l; 
                           :}
 |  variable_initializers:a COMMA variable_initializer:b {:
                                                         RESULT = a; a.add(b); 
                                                         :};

block ::=
    LBRACE:n block_statements_opt:a RBRACE:d {:
                                             RESULT = parser.nf.Block(parser.pos(n, d), a); 
                                             :}
 |  error RBRACE:d {:
                   RESULT = parser.nf.Block(parser.pos(d),
                                        Collections.EMPTY_LIST); 
                   :};

block_statements_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), Stmt.class, false);  :}
 |  block_statements:a {:  RESULT = a;  :};

block_statements ::=
    block_statement:a {:
                      List l = new TypedList(new LinkedList(), Stmt.class, false);
               l.addAll(a);
               RESULT = l; 
                      :}
 |  block_statements:a block_statement:b {:
                                         RESULT = a;
               a.addAll(b); 
                                         :};

block_statement ::=
    local_variable_declaration_statement:a {:  RESULT = a;  :}
 |  statement:a {:
                List l = new TypedList(new LinkedList(), Stmt.class, false);
               l.add(a);
               RESULT = l; 
                :}
 |  class_declaration:a {:
                        List l = new TypedList(new LinkedList(), Stmt.class, false);
               l.add(parser.nf.LocalClassDecl(parser.pos(a), a));
               RESULT = l; 
                        :};

local_variable_declaration_statement ::=
    local_variable_declaration:a SEMICOLON {:  RESULT = a;  :};

local_variable_declaration ::=
    type:a variable_declarators:b {:
                                  RESULT = parser.variableDeclarators(a, b, Flags.NONE); 
                                  :}
 |  FINAL type:a variable_declarators:b {:
                                        RESULT = parser.variableDeclarators(a, b, Flags.FINAL); 
                                        :};

statement ::=
    statement_without_trailing_substatement:a {:  RESULT = a;  :}
 |  labeled_statement:a {:  RESULT = a;  :}
 |  if_then_statement:a {:  RESULT = a;  :}
 |  if_then_else_statement:a {:  RESULT = a;  :}
 |  while_statement:a {:  RESULT = a;  :}
 |  for_statement:a {:  RESULT = a;  :}
 |  error SEMICOLON:a {:  RESULT = parser.nf.Empty(parser.pos(a));  :}
 |  sj_gprotocol_declaration_statement:a {:  
		RESULT = a; 
	 :}
 |  sj_protocol_declaration_statement:a {:  
		RESULT = a; 
	 :}
 |  sj_structural_operation:a {: 
		RESULT = a;
	 :};

statement_no_short_if ::=
    statement_without_trailing_substatement:a {:  RESULT = a;  :}
 |  labeled_statement_no_short_if:a {:  RESULT = a;  :}
 |  if_then_else_statement_no_short_if:a {:  RESULT = a;  :}
 |  while_statement_no_short_if:a {:  RESULT = a;  :}
 |  for_statement_no_short_if:a {:  RESULT = a;  :};

statement_without_trailing_substatement ::=
    block:a {:  RESULT = a;  :}
 |  empty_statement:a {:  RESULT = a;  :}
 |  expression_statement:a {:  RESULT = a;  :}
 |  switch_statement:a {:  RESULT = a;  :}
 |  do_statement:a {:  RESULT = a;  :}
 |  break_statement:a {:  RESULT = a;  :}
 |  continue_statement:a {:  RESULT = a;  :}
 |  return_statement:a {:  RESULT = a;  :}
 |  synchronized_statement:a {:  RESULT = a;  :}
 |  throw_statement:a {:  RESULT = a;  :}
 |  try_statement:a {:  RESULT = a;  :}
 |  assert_statement:a {:  RESULT = a;  :}
 |  sj_try_statement:a {: 
		RESULT = a;
	 :};

empty_statement ::=
    SEMICOLON:a {:  RESULT = parser.nf.Empty(parser.pos(a));  :};

labeled_statement ::=
    IDENTIFIER:a COLON statement:b {:
                                   RESULT = parser.nf.Labeled(parser.pos(a, b),
                                      parser.nf.Id(parser.pos(a), a.getIdentifier()), b); 
                                   :};

labeled_statement_no_short_if ::=
    IDENTIFIER:a COLON statement_no_short_if:b {:
                                               RESULT = parser.nf.Labeled(parser.pos(a, b),
                                      parser.nf.Id(parser.pos(a), a.getIdentifier()), b); 
                                               :};

expression_statement ::=
    statement_expression:a SEMICOLON:d {:
                                       RESULT = parser.nf.Eval(parser.pos(a, d), a); 
                                       :};

statement_expression ::=
    assignment:a {:  RESULT = a;  :}
 |  preincrement_expression:a {:  RESULT = a;  :}
 |  predecrement_expression:a {:  RESULT = a;  :}
 |  postincrement_expression:a {:  RESULT = a;  :}
 |  postdecrement_expression:a {:  RESULT = a;  :}
 |  method_invocation:a {:  RESULT = a;  :}
 |  class_instance_creation_expression:a {:  RESULT = a;  :}
 |  sj_basic_operation:a {: 
		RESULT = a;
	 :}
 |  sj_spawn_operation:a {: 
		RESULT = a;
	 :};

if_then_statement ::=
    IF:n LPAREN expression:a RPAREN statement:b {:
                                                RESULT = parser.nf.If(parser.pos(n, b), a, b); 
                                                :};

if_then_else_statement ::=
    IF:n LPAREN expression:a RPAREN statement_no_short_if:b ELSE statement:c {:
                                                                             RESULT = parser.nf.If(parser.pos(n, c), a, b, c); 
                                                                             :};

if_then_else_statement_no_short_if ::=
    IF:n LPAREN expression:a RPAREN statement_no_short_if:b ELSE statement_no_short_if:c {:
                                                                                         RESULT = parser.nf.If(parser.pos(n, c), a, b, c); 
                                                                                         :};

switch_statement ::=
    SWITCH:n LPAREN expression:a RPAREN:rprn switch_block:b {:
                                                            
               Position endpos = parser.pos(n, b);
               if (endpos == null) endpos = parser.pos(n, rprn);
               RESULT = parser.nf.Switch(endpos, a, b); 
            
                                                            :};

switch_block ::=
    LBRACE switch_block_statement_groups:a switch_labels:b RBRACE {:
                                                                  RESULT = a;
               a.addAll(b); 
                                                                  :}
 |  LBRACE switch_block_statement_groups:a RBRACE {:  RESULT = a;  :}
 |  LBRACE switch_labels:a RBRACE {:  RESULT = a;  :}
 |  LBRACE RBRACE {:
                  RESULT = new TypedList(new LinkedList(), SwitchElement.class, false); 
                  :};

switch_block_statement_groups ::=
    switch_block_statement_group:a {:  RESULT = a;  :}
 |  switch_block_statement_groups:a switch_block_statement_group:b {:
                                                                   RESULT = a;
               a.addAll(b); 
                                                                   :};

switch_block_statement_group ::=
    switch_labels:a block_statements:b {:
                                       List l = new TypedList(new LinkedList(), SwitchElement.class, false);
               l.addAll(a); 
               l.add(parser.nf.SwitchBlock(parser.pos(a, b), b));
               RESULT = l; 
                                       :};

switch_labels ::=
    switch_label:a {:
                   List l = new TypedList(new LinkedList(), Case.class, false);
               l.add(a);
               RESULT = l; 
                   :}
 |  switch_labels:a switch_label:b {:  RESULT = a;
               a.add(b);  :};

switch_label ::=
    CASE:n constant_expression:a COLON:d {:
                                         RESULT = parser.nf.Case(parser.pos(n, d), a); 
                                         :}
 |  DEFAULT:n COLON:d {:  RESULT = parser.nf.Default(parser.pos(n, d));  :};

while_statement ::=
    WHILE:n LPAREN expression:a RPAREN statement:b {:
                                                   RESULT = parser.nf.While(parser.pos(n, b), a, b); 
                                                   :};

while_statement_no_short_if ::=
    WHILE:n LPAREN expression:a RPAREN statement_no_short_if:b {:
                                                               RESULT = parser.nf.While(parser.pos(n, b), a, b); 
                                                               :};

do_statement ::=
    DO:n statement:a WHILE LPAREN expression:b RPAREN SEMICOLON:d {:
                                                                  RESULT = parser.nf.Do(parser.pos(n, d), a, b); 
                                                                  :};

for_statement ::=
    FOR:n LPAREN for_init_opt:a SEMICOLON expression_opt:b SEMICOLON:e for_update_opt:c RPAREN statement:d {:
                                                                                                           RESULT = parser.nf.For(parser.pos(n, e), a, b, c, d); 
                                                                                                           :};

for_statement_no_short_if ::=
    FOR:n LPAREN for_init_opt:a SEMICOLON expression_opt:b SEMICOLON:e for_update_opt:c RPAREN statement_no_short_if:d {:
                                                                                                                       RESULT = parser.nf.For(parser.pos(n, e), a, b, c, d); 
                                                                                                                       :};

for_init_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), ForInit.class, false);  :}
 |  for_init:a {:  RESULT = a;  :};

for_init ::=
    statement_expression_list:a {:  RESULT = a;  :}
 |  local_variable_declaration:a {:
                                 List l = new TypedList(new LinkedList(), ForInit.class, false);
               l.addAll(a);
               RESULT = l; 
                                 :};

for_update_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), ForUpdate.class, false);  :}
 |  for_update:a {:  RESULT = a;  :};

for_update ::=
    statement_expression_list:a {:  RESULT = a;  :};

statement_expression_list ::=
    statement_expression:a {:
                           List l = new TypedList(new LinkedList(), Eval.class, false);
               l.add(parser.nf.Eval(parser.pos(a), a));
               RESULT = l; 
                           :}
 |  statement_expression_list:a COMMA statement_expression:b {:
                                                             RESULT = a;
               a.add(parser.nf.Eval(parser.pos(a, b, b), b)); 
                                                             :};

identifier_opt ::=
    {:  RESULT = null;  :}
 |  IDENTIFIER:a {:
                 RESULT = new Name(parser.nf, parser.ts, parser.pos(a), 
                parser.nf.Id(parser.pos(a), a.getIdentifier())); 
                 :};

break_statement ::=
    BREAK:n identifier_opt:a SEMICOLON:d {:
                                         if (a == null)
                   RESULT = parser.nf.Break(parser.pos(n, d));
               else
                   RESULT = parser.nf.Break(parser.pos(n, d), parser.nf.Id(parser.pos(a), a.toString())); 
                                         :};

continue_statement ::=
    CONTINUE:n identifier_opt:a SEMICOLON:d {:
                                            if (a == null)
                   RESULT = parser.nf.Continue(parser.pos(n, d));
               else
                   RESULT = parser.nf.Continue(parser.pos(n, d), parser.nf.Id(parser.pos(a), a.toString())); 
                                            :};

return_statement ::=
    RETURN:n expression_opt:a SEMICOLON:d {:
                                          RESULT = parser.nf.Return(parser.pos(n, d), a); 
                                          :};

throw_statement ::=
    THROW:n expression:a SEMICOLON:d {:
                                     RESULT = parser.nf.Throw(parser.pos(n, d), a); 
                                     :};

synchronized_statement ::=
    SYNCHRONIZED:n LPAREN expression:a RPAREN block:b {:
                                                      RESULT = parser.nf.Synchronized(parser.pos(n, b), a, b); 
                                                      :};

try_statement ::=
    TRY:n block:a catches:b {:
                            RESULT = parser.nf.Try(parser.pos(n, b), a, b); 
                            :}
 |  TRY:n block:a catches_opt:b finally:c {:
                                          RESULT = parser.nf.Try(parser.pos(n, c), a, b, c); 
                                          :};

catches_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), Catch.class, false);  :}
 |  catches:a {:  RESULT = a;  :};

catches ::=
    catch_clause:a {:
                   List l = new TypedList(new LinkedList(), Catch.class, false);
               l.add(a);
               RESULT = l; 
                   :}
 |  catches:a catch_clause:b {:  RESULT = a;
               a.add(b);  :};

catch_clause ::=
    CATCH:n LPAREN formal_parameter:a RPAREN block:b {:
                                                     RESULT = parser.nf.Catch(parser.pos(n, b), a, b); 
                                                     :};

finally ::=
    FINALLY block:a {:  RESULT = a;  :};

assert_statement ::=
    ASSERT:x expression:a SEMICOLON:d {:
                                      RESULT = parser.nf.Assert(parser.pos(x, d), a); 
                                      :}
 |  ASSERT:x expression:a COLON expression:b SEMICOLON:d {:
                                                         RESULT = parser.nf.Assert(parser.pos(x, d), a, b); 
                                                         :};

primary ::=
    primary_no_new_array:a {:  RESULT = a;  :}
 |  array_creation_expression:a {:  RESULT = a;  :};

primary_no_new_array ::=
    literal:a {:  RESULT = a;  :}
 |  THIS:a {:  RESULT = parser.nf.This(parser.pos(a));  :}
 |  LPAREN expression:a RPAREN {:  RESULT = a;  :}
 |  class_instance_creation_expression:a {:  RESULT = a;  :}
 |  field_access:a {:  RESULT = a;  :}
 |  method_invocation:a {:  RESULT = a;  :}
 |  array_access:a {:  RESULT = a;  :}
 |  primitive_type:a DOT CLASS:n {:
                                 RESULT = parser.nf.ClassLit(parser.pos(a, n, n), a); 
                                 :}
 |  VOID:a DOT CLASS:n {:
                       RESULT = parser.nf.ClassLit(parser.pos(a, n, n), 
                parser.nf.CanonicalTypeNode(parser.pos(a),
                                            parser.ts.Void())); 
                       :}
 |  array_type:a DOT CLASS:n {:
                             RESULT = parser.nf.ClassLit(parser.pos(a, n, n), a); 
                             :}
 |  name:a DOT CLASS:n {:
                       RESULT = parser.nf.ClassLit(parser.pos(a, n, n), a.toType()); 
                       :}
 |  name:a DOT THIS:n {:
                      RESULT = parser.nf.This(parser.pos(a, n, n), a.toType()); 
                      :};

class_instance_creation_expression ::=
    NEW:n class_type:a LPAREN argument_list_opt:b RPAREN:d {:
                                                           RESULT = parser.nf.New(parser.pos(n, d), a, b); 
                                                           :}
 |  NEW:n class_type:a LPAREN argument_list_opt:b RPAREN class_body:c {:
                                                                      RESULT = parser.nf.New(parser.pos(n, c), a, b, c); 
                                                                      :}
 |  primary:a DOT NEW simple_name:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                        RESULT = parser.nf.New(parser.pos(a, d), a,
				      b.toType(), c); 
                                                                        :}
 |  primary:a DOT NEW simple_name:b LPAREN argument_list_opt:c RPAREN class_body:d {:
                                                                                   RESULT = parser.nf.New(parser.pos(a, d), a,
				      b.toType(), c, d); 
                                                                                   :}
 |  name:a DOT NEW simple_name:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                     RESULT = parser.nf.New(parser.pos(a, d), a.toExpr(),
				      b.toType(), c); 
                                                                     :}
 |  name:a DOT NEW simple_name:b LPAREN argument_list_opt:c RPAREN class_body:d {:
                                                                                RESULT = parser.nf.New(parser.pos(a, d), a.toExpr(),
				      b.toType(), c, d); 
                                                                                :};

argument_list_opt ::=
    {:  RESULT = new TypedList(new LinkedList(), Expr.class, false);  :}
 |  argument_list:a {:  RESULT = a;  :};

argument_list ::=
    expression:a {:
                 List l = new TypedList(new LinkedList(), Expr.class, false);
               l.add(a);
               RESULT = l; 
                 :}
 |  argument_list:a COMMA expression:b {:
                                       RESULT = a;
               a.add(b); 
                                       :};

array_creation_expression ::=
    NEW:n primitive_type:a dim_exprs:b dims_opt:c {:
                                                  RESULT = parser.nf.NewArray(parser.pos(n, b), a, b,
                c.intValue()); 
                                                  :}
 |  NEW:n class_or_interface_type:a dim_exprs:b dims_opt:c {:
                                                           RESULT = parser.nf.NewArray(parser.pos(n, b), a, b, 
                c.intValue()); 
                                                           :}
 |  NEW:n primitive_type:a dims:b array_initializer:c {:
                                                      RESULT = parser.nf.NewArray(parser.pos(n, c), a,
                b.intValue(), c); 
                                                      :}
 |  NEW:n class_or_interface_type:a dims:b array_initializer:c {:
                                                               RESULT = parser.nf.NewArray(parser.pos(n, c), a,
                b.intValue(), c); 
                                                               :};

dim_exprs ::=
    dim_expr:a {:
               List l = new TypedList(new LinkedList(), Expr.class, false);
               l.add(a);
               RESULT = l; 
               :}
 |  dim_exprs:a dim_expr:b {:  RESULT = a;
               a.add(b);  :};

dim_expr ::=
    LBRACK:x expression:a RBRACK:y {:
                                   RESULT = (Expr)a.position(parser.pos(x,y,a)); 
                                   :};

dims_opt ::=
    {:  RESULT = new Integer(0);  :}
 |  dims:a {:  RESULT = a;  :};

dims ::=
    LBRACK RBRACK {:  RESULT = new Integer(1);  :}
 |  dims:a LBRACK RBRACK {:  RESULT = new Integer(a.intValue() + 1);  :};

field_access ::=
    primary:a DOT IDENTIFIER:b {:
                               RESULT = parser.nf.Field(parser.pos(a, b, b), a,
                parser.nf.Id(parser.pos(b), b.getIdentifier())); 
                               :}
 |  SUPER:n DOT IDENTIFIER:a {:
                             RESULT = parser.nf.Field(parser.pos(a),
                parser.nf.Super(parser.pos(n)),
                parser.nf.Id(parser.pos(a), a.getIdentifier())); 
                             :}
 |  name:a DOT SUPER:n DOT IDENTIFIER:b {:
                                        RESULT = parser.nf.Field(parser.pos(b),
                parser.nf.Super(parser.pos(n), a.toType()),
                parser.nf.Id(parser.pos(b), b.getIdentifier())); 
                                        :};

method_invocation ::=
    name:a LPAREN argument_list_opt:b RPAREN:d {:
                                               RESULT = parser.nf.Call(parser.pos(a,d),
                a.prefix == null ? null : a.prefix.toReceiver(),
                a.name, b); 
                                               :}
 |  primary:a DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                   RESULT = parser.nf.Call(parser.pos(b,d), a,
                parser.nf.Id(parser.pos(b), b.getIdentifier()), c); 
                                                                   :}
 |  SUPER:a DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                 RESULT = parser.nf.Call(parser.pos(a,d, b),
                parser.nf.Super(parser.pos(a)),
                parser.nf.Id(parser.pos(b), b.getIdentifier()), c); 
                                                                 :}
 |  name:a DOT SUPER:n DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN:d {:
                                                                            RESULT = parser.nf.Call(parser.pos(b,d),
                parser.nf.Super(parser.pos(n), a.toType()),
                parser.nf.Id(parser.pos(b), b.getIdentifier()), c); 
                                                                            :}
 |  name:tgt DOT SJ_SEND:b LPAREN argument_list_opt:arg RPAREN:end {:
                                                                   
		RESULT = parser.nf.SJSend(parser.pos(tgt, end), arg, parser.asRecvList(tgt));
	
                                                                   :}
 |  name:a DOT SJ_PASS:b LPAREN argument_list_opt:c RPAREN:d {:
                                                             
		RESULT = parser.nf.SJPass(parser.pos(a, d), c, parser.asRecvList(a));
	
                                                             :}
 |  name:a DOT SJ_COPY:b LPAREN argument_list_opt:c RPAREN:d {:
                                                             		
		RESULT = parser.nf.SJCopy(parser.pos(a, d), c, parser.asRecvList(a));
	
                                                             :}
 |  sj_receive_operation:a {:  		
		RESULT = a; 
	 :}
 |  sj_receiveint_operation:a {:  		
		RESULT = a; 
	 :}
 |  sj_receiveboolean_operation:a {:  		
	RESULT = a; 
 :}
 |  sj_receivedouble_operation:a {:  		
	RESULT = a; 
 :}
 |  name:a DOT SJ_RECURSE LPAREN IDENTIFIER:b RPAREN:c {:
                                                       	
		RESULT = parser.nf.SJRecurse(parser.pos(a, c), new SJLabel(b.getIdentifier()), parser.asRecvList(a)); 
	
                                                       :}
 |  name:a DOT SJ_SPAWN LPAREN class_instance_creation_expression:b RPAREN:c {:
                                                                             	
		if (!(b instanceof New))
		{
			// Not using SJRuntimeException: Doesn't work for fresh build - sessionj.runtime classes not built yet.
			throw new RuntimeException("[SJParser] Unsupported spawn target: " + b);
		}
		
		RESULT = parser.nf.SJSpawn(parser.pos(a, c), (New) b, parser.asRecvList(a)); 
	
                                                                             :};

array_access ::=
    name:a LBRACK expression:b RBRACK:d {:
                                        RESULT = parser.nf.ArrayAccess(parser.pos(a, d), a.toExpr(), b); 
                                        :}
 |  primary_no_new_array:a LBRACK expression:b RBRACK:d {:
                                                        RESULT = parser.nf.ArrayAccess(parser.pos(a, d), a, b); 
                                                        :};

postfix_expression ::=
    primary:a {:  RESULT = a;  :}
 |  name:a {:  RESULT = a.toExpr();  :}
 |  postincrement_expression:a {:  RESULT = a;  :}
 |  postdecrement_expression:a {:  RESULT = a;  :};

postincrement_expression ::=
    postfix_expression:a PLUSPLUS:b {:
                                    RESULT = parser.nf.Unary(parser.pos(a,b), a, Unary.POST_INC); 
                                    :};

postdecrement_expression ::=
    postfix_expression:a MINUSMINUS:b {:
                                      RESULT = parser.nf.Unary(parser.pos(a,b), a, Unary.POST_DEC); 
                                      :};

unary_expression ::=
    preincrement_expression:a {:  RESULT = a;  :}
 |  predecrement_expression:a {:  RESULT = a;  :}
 |  PLUS:b unary_expression:a {:
                              RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.POS, a); 
                              :}
 |  MINUS:b unary_expression:a {:
                               RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.NEG, a); 
                               :}
 |  MINUS:b boundary_literal:a {:
                               RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.NEG, a); 
                               :}
 |  unary_expression_not_plus_minus:a {:  RESULT = a;  :};

preincrement_expression ::=
    PLUSPLUS:b unary_expression:a {:
                                  RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.PRE_INC, a); 
                                  :};

predecrement_expression ::=
    MINUSMINUS:b unary_expression:a {:
                                    RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.PRE_DEC, a); 
                                    :};

unary_expression_not_plus_minus ::=
    postfix_expression:a {:  RESULT = a;  :}
 |  COMP:b unary_expression:a {:
                              RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.BIT_NOT, a); 
                              :}
 |  NOT:b unary_expression:a {:
                             RESULT = parser.nf.Unary(parser.pos(b,a,a), Unary.NOT, a); 
                             :}
 |  cast_expression:a {:  RESULT = a;  :};

cast_expression ::=
    LPAREN:p primitive_type:a dims_opt:b RPAREN unary_expression:c {:
                                                                   RESULT = parser.nf.Cast(parser.pos(p, c,a),
                parser.array(a, b.intValue()), c); 
                                                                   :}
 |  LPAREN:p expression:a RPAREN unary_expression_not_plus_minus:b {:
                                                                   RESULT = parser.nf.Cast(parser.pos(p, b,a),
                parser.exprToType(a), b); 
                                                                   :}
 |  LPAREN:p name:a dims:b RPAREN unary_expression_not_plus_minus:c {:
                                                                    RESULT = parser.nf.Cast(parser.pos(p, c,a),
                parser.array(a.toType(), b.intValue()), c); 
                                                                    :}
 |  sj_session_type_cast_expression:a {: 
		RESULT = a;	
	 :};

multiplicative_expression ::=
    unary_expression:a {:  RESULT = a;  :}
 |  multiplicative_expression:a MULT unary_expression:b {:
                                                        RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.MUL, b); 
                                                        :}
 |  multiplicative_expression:a DIV unary_expression:b {:
                                                       RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.DIV, b); 
                                                       :}
 |  multiplicative_expression:a MOD unary_expression:b {:
                                                       RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.MOD, b); 
                                                       :};

additive_expression ::=
    multiplicative_expression:a {:  RESULT = a;  :}
 |  additive_expression:a PLUS multiplicative_expression:b {:
                                                           RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.ADD, b); 
                                                           :}
 |  additive_expression:a MINUS multiplicative_expression:b {:
                                                            RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.SUB, b); 
                                                            :};

shift_expression ::=
    additive_expression:a {:  RESULT = a;  :}
 |  shift_expression:a LSHIFT additive_expression:b {:
                                                    RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.SHL, b); 
                                                    :}
 |  shift_expression:a RSHIFT additive_expression:b {:
                                                    RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.SHR, b); 
                                                    :}
 |  shift_expression:a URSHIFT additive_expression:b {:
                                                     RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.USHR, b); 
                                                     :};

relational_expression ::=
    shift_expression:a {:  RESULT = a;  :}
 |  relational_expression:a LT shift_expression:b {:
                                                  RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.LT, b); 
                                                  :}
 |  relational_expression:a GT shift_expression:b {:
                                                  RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.GT, b); 
                                                  :}
 |  relational_expression:a LTEQ shift_expression:b {:
                                                    RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.LE, b); 
                                                    :}
 |  relational_expression:a GTEQ shift_expression:b {:
                                                    RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.GE, b); 
                                                    :}
 |  relational_expression:a INSTANCEOF reference_type:b {:
                                                        RESULT = parser.nf.Instanceof(parser.pos(a, b), a, b); 
                                                        :};

equality_expression ::=
    relational_expression:a {:  RESULT = a;  :}
 |  equality_expression:a EQEQ relational_expression:b {:
                                                       RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.EQ, b); 
                                                       :}
 |  equality_expression:a NOTEQ relational_expression:b {:
                                                        RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.NE, b); 
                                                        :};

and_expression ::=
    equality_expression:a {:  RESULT = a;  :}
 |  and_expression:a AND equality_expression:b {:
                                               RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.BIT_AND, b); 
                                               :};

exclusive_or_expression ::=
    and_expression:a {:  RESULT = a;  :}
 |  exclusive_or_expression:a XOR and_expression:b {:
                                                   RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.BIT_XOR, b); 
                                                   :};

inclusive_or_expression ::=
    exclusive_or_expression:a {:  RESULT = a;  :}
 |  inclusive_or_expression:a OR exclusive_or_expression:b {:
                                                           RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.BIT_OR, b); 
                                                           :};

conditional_and_expression ::=
    inclusive_or_expression:a {:  RESULT = a;  :}
 |  conditional_and_expression:a ANDAND inclusive_or_expression:b {:
                                                                  RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.COND_AND, b); 
                                                                  :};

conditional_or_expression ::=
    conditional_and_expression:a {:  RESULT = a;  :}
 |  conditional_or_expression:a OROR conditional_and_expression:b {:
                                                                  RESULT = parser.nf.Binary(parser.pos(a, b), a, 
                Binary.COND_OR, b); 
                                                                  :};

conditional_expression ::=
    conditional_or_expression:a {:  RESULT = a;  :}
 |  conditional_or_expression:a QUESTION expression:b COLON conditional_expression:c {:
                                                                                     RESULT = parser.nf.Conditional(parser.pos(a, c), a, 
                b, c); 
                                                                                     :};

assignment_expression ::=
    conditional_expression:a {:  RESULT = a;  :}
 |  assignment:a {:  RESULT = a;  :};

assignment ::=
    left_hand_side:a assignment_operator:b assignment_expression:c {:
                                                                   RESULT = parser.nf.Assign(parser.pos(a, c), a, b, c); 
                                                                   :};

left_hand_side ::=
    name:a {:  RESULT = a.toExpr();  :}
 |  field_access:a {:  RESULT = a;  :}
 |  array_access:a {:  RESULT = a;  :};

assignment_operator ::=
    EQ {:  RESULT = Assign.ASSIGN;  :}
 |  MULTEQ {:  RESULT = Assign.MUL_ASSIGN;  :}
 |  DIVEQ {:  RESULT = Assign.DIV_ASSIGN;  :}
 |  MODEQ {:  RESULT = Assign.MOD_ASSIGN;  :}
 |  PLUSEQ {:  RESULT = Assign.ADD_ASSIGN;  :}
 |  MINUSEQ {:  RESULT = Assign.SUB_ASSIGN;  :}
 |  LSHIFTEQ {:  RESULT = Assign.SHL_ASSIGN;  :}
 |  RSHIFTEQ {:  RESULT = Assign.SHR_ASSIGN;  :}
 |  URSHIFTEQ {:  RESULT = Assign.USHR_ASSIGN;  :}
 |  ANDEQ {:  RESULT = Assign.BIT_AND_ASSIGN;  :}
 |  XOREQ {:  RESULT = Assign.BIT_XOR_ASSIGN;  :}
 |  OREQ {:  RESULT = Assign.BIT_OR_ASSIGN;  :};

expression_opt ::=
    {:  RESULT = null;  :}
 |  expression:a {:  RESULT = a;  :};

expression ::=
    assignment_expression:a {:  RESULT = a;  :};

constant_expression ::=
    expression:a {:  RESULT = a;  :};

sj_field_participant_declaration ::=
    modifiers_opt:a SJ_PARTICIPANT IDENTIFIER:b {:
                                               
		RESULT = parser.nf.SJParticipant(parser.pos(a,b),  parser.nf.Id(parser.pos(b), b.getIdentifier()));
       
                                                :};

sj_field_gprotocol_declaration ::=
    modifiers_opt:a SJ_GPROTOCOL IDENTIFIER:n sj_gsession_type:t {:
                                                                
		RESULT = parser.nf.SJFieldGProtocolDecl(parser.pos(a, t), a, parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                 :}
 |  modifiers_opt:a SJ_NOALIAS SJ_GPROTOCOL IDENTIFIER:n sj_gsession_type:t {:
                                                                           
		RESULT = parser.nf.SJFieldGProtocolDecl(parser.pos(a, t), a, parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                            :};

sj_gprotocol_declaration_statement ::=
    optional_final_noalias SJ_GPROTOCOL:a IDENTIFIER:n sj_gsession_type:t {:
                                                                          
		RESULT = parser.nf.SJLocalGProtocolDecl(parser.pos(a, t), parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                          :};

sj_field_protocol_declaration ::=
    modifiers_opt:a SJ_PROTOCOL IDENTIFIER:n SJ_PROTOCOL_REF IDENTIFIER:m sj_session_type:t {:
                                                                                           
		RESULT = parser.nf.SJFieldProtocolDecl(parser.pos(a, t), a, parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                                            :}
 |  modifiers_opt:a SJ_NOALIAS SJ_PROTOCOL IDENTIFIER:n SJ_PROTOCOL_REF IDENTIFIER:m sj_session_type:t {:
                                                                                                      
		RESULT = parser.nf.SJFieldProtocolDecl(parser.pos(a, t), a, parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                                                       :};

sj_protocol_declaration_statement ::=
    optional_final_noalias SJ_PROTOCOL:a IDENTIFIER:n SJ_PROTOCOL_REF IDENTIFIER:m sj_session_type:t {:
                                                                                                     
		RESULT = parser.nf.SJLocalProtocolDecl(parser.pos(a, t), parser.nf.Id(parser.pos(n), n.getIdentifier()), t);
	
                                                                                                     :};

optional_final_noalias ::=
   
 |  FINAL
 |  FINAL SJ_NOALIAS
 |  SJ_NOALIAS FINAL
 |  SJ_NOALIAS;

sj_session_type ::=
    sj_channel_type:a {:  RESULT = a;  :}
 |  sj_server_type:a {:  RESULT = a;  :}
 |  sj_session_type_body:a {:  RESULT = a;  :}
 |  sj_session_set_type:a {:  RESULT = a;  :};

sj_session_set_type ::=
    LBRACE:l sj_session_set_type_body:b RBRACE:r {:
                                                
        RESULT = new SJSetTypeNode_c(parser.pos(l,r), b);
    
                                                 :};

sj_session_set_type_body ::=
    sj_session_type:t {:
                     
        List l = new LinkedList();
        l.add(t);
        RESULT = l;
    
                      :}
 |  sj_session_set_type_body:l COMMA sj_session_type:t {:
                                                      
        l.add(t);
        RESULT = l;
    
                                                       :};

sj_channel_type ::=
    sj_session_type_cbegin:a {:   RESULT = a;   :}
 |  sj_session_type_cbegin:a DOT sj_session_type_body:b {:
                                                        RESULT = a.child(b); 
                                                        :};

sj_server_type ::=
    sj_session_type_sbegin:a {:   RESULT = a;   :}
 |  sj_session_type_sbegin:a DOT sj_session_type_body:b {:
                                                        RESULT = a.child(b); 
                                                        :};

sj_session_type_cbegin ::=
    NOT:a SJ_CBEGIN:b {:
                     
		RESULT = parser.nf.SJCBeginNode(parser.pos(a,b));
	
                      :};

sj_session_type_sbegin ::=
    IDENTIFIER:a COLON QUESTION SJ_CBEGIN:b {:
                                           
		RESULT = parser.nf.SJSBeginNode(parser.pos(a, b), parser.nf.Id(parser.pos(a), a.getIdentifier())); 
	
                                            :};

sj_session_type_body ::=
    sj_session_type_element:a {:  
		RESULT = a; 
	 :}
 |  sj_session_type_element:a DOT sj_session_type_body:b {:
                                                         
		RESULT = a.child(b); 
	
                                                         :};

sj_session_type_element ::=
    IDENTIFIER:a COLON NOT LT sj_message_type:b GT:c {:
                                                     
		RESULT = parser.nf.SJSendNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b); 
	
                                                     :}
 |  IDENTIFIER:a COLON QUESTION LPAREN sj_message_type:b RPAREN:c {:
                                                                 
		RESULT = parser.nf.SJReceiveNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b);
	
                                                                  :}
 |  NOT:a LBRACE sj_branch_cases:b RBRACE:c {:
                                           
		RESULT = parser.nf.SJOutbranchNode(parser.pos(a, c), b);
	
                                            :}
 |  IDENTIFIER:a COLON QUESTION LBRACE sj_branch_cases:b RBRACE:c {:
                                                                 
		RESULT = parser.nf.SJInbranchNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b);
	
                                                                  :}
 |  NOT:a LBRACK sj_session_type_body:b RBRACK MULT:c {:
                                                     
		RESULT = parser.nf.SJOutwhileNode(parser.pos(a, c), b);
	
                                                      :}
 |  NOT:a LBRACK RBRACK MULT:c {:
                              
		RESULT = parser.nf.SJOutwhileNode(parser.pos(a, c), null);
	
                               :}
 |  IDENTIFIER:a COLON QUESTION LBRACK sj_session_type_body:b RBRACK MULT:c {:
                                                                           
		RESULT = parser.nf.SJInwhileNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b);
	
                                                                            :}
 |  IDENTIFIER:a COLON QUESTION LBRACK RBRACK MULT:c {:
                                                    
		RESULT = parser.nf.SJInwhileNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), null);
//</By MQ>
	
                                                     :}
 |  SJ_REC:a IDENTIFIER:b LBRACK sj_session_type_body:c RBRACK:d {:
                                                                
		RESULT = parser.nf.SJRecursionNode(parser.pos(a, d), new SJLabel(b.getIdentifier()), c);
	
                                                                 :}
 |  SJ_REC:a IDENTIFIER:b LBRACK RBRACK:d {:
                                         
		RESULT = parser.nf.SJRecursionNode(parser.pos(a, d), new SJLabel(b.getIdentifier()), null);
	
                                          :}
 |  SJ_RECURSE_LABEL:a IDENTIFIER:b {:
                                   
		RESULT = parser.nf.SJRecurseNode(parser.pos(a, b), new SJLabel(b.getIdentifier()));
	
                                    :}
 |  SJ_PROTOCOL_REF:a LPAREN name:b RPAREN:c {:
                                            
		RESULT = parser.nf.SJProtocolRefNode(parser.pos(a, b), b.toReceiver());
	
                                             :}
 |  XOR:a LPAREN name:b RPAREN:c {:
                                
		RESULT = parser.nf.SJProtocolDualNode(parser.pos(a, c), b.toReceiver());
	
                                 :};

sj_gsession_type ::=
    sj_participants_type:a DOT sj_gbegin_type:b {:  RESULT = b;  :}
 |  sj_gsession_type_body:a {:  RESULT = a;  :}
 |  sj_gsession_set_type:a {:  RESULT = a;  :};

sj_gbegin_type ::=
    sj_session_type_gbegin:a {:   RESULT = a;   :}
 |  sj_session_type_gbegin:a DOT sj_gsession_type_body:b {:
                                                        
		//parser.nf.optimizeProtocol(b);
		if(b != null)
		     	RESULT = parser.nf.optimizeProtocol(a.child(b));
		else
			RESULT = parser.nf.optimizeProtocol(a);
	    
                                                         :};

sj_session_type_gbegin ::=
    IDENTIFIER:a COLON SJ_CBEGIN:b {:
                                  
		RESULT = parser.nf.SJGBeginNode(parser.pos(a,b), parser.nf.Id(parser.pos(a), a.getIdentifier())); 
	
                                   :};

sj_participants_type ::=
    SJ_PARTICIPANTS:a COLON sj_identifier_list:b {:
                                                
		RESULT = parser.nf.SJParticipantsNode(parser.pos(a,b), b);
	
                                                 :};

sj_identifier_list ::=
    IDENTIFIER:a {:
                
		List ids = new LinkedList();
		ids.add(parser.nf.Id(parser.pos(a), a.getIdentifier()));
		RESULT = ids;
	
                 :}
 |  sj_identifier_list:ids COMMA IDENTIFIER:b {:
                                             
		ids.add(parser.nf.Id(parser.pos(b), b.getIdentifier()));
		RESULT = ids;
	
                                              :};

sj_gsession_type_body ::=
    sj_gsession_type_element:a {:  
		RESULT = a; 
	 :}
 |  sj_gsession_type_element:a DOT sj_gsession_type_body:b {:
                                                          
		if(a != null) 
			RESULT = a.child(b); 
		else
			RESULT = b;
	
                                                           :};

sj_gsession_set_type ::=
    LBRACE:l sj_gsession_set_type_body:b RBRACE:r {:
                                                 
        RESULT = new SJSetTypeNode_c(parser.pos(l,r), b);
    
                                                  :};

sj_gsession_set_type_body ::=
    sj_gsession_type:t {:
                      
        List l = new LinkedList();
        l.add(t);
        RESULT = l;
    
                       :}
 |  sj_gsession_set_type_body:l COMMA sj_gsession_type:t {:
                                                        
        l.add(t);
        RESULT = l;
    
                                                         :};

sj_gmessage_type_list ::=
    sj_gmessage_type:w {:
                      
        List l = new LinkedList();
        l.add(w); RESULT = l;
    
                       :}
 |  sj_gmessage_type_list:l COMMA sj_gmessage_type:w {:
                                                    
        l.add(w); RESULT = l;
    
                                                     :};

sj_gmessage_type ::=
    type:a {:  
		RESULT = a; 
	 :}
 |  sj_gsession_type:a {:  
		RESULT = a;
	 :};

sj_gbranch_cases ::=
    sj_gbranch_case:a {:
                     
		List l = new TypedList(new LinkedList(), SJBranchCaseNode.class, false);

		l.add(a);
		
		RESULT = l;
	
                      :}
 |  sj_gbranch_case:a COMMA sj_gbranch_cases:b {:
                                              
		b.add(a);

		RESULT = b;
	
                                               :};

sj_gbranch_case ::=
    IDENTIFIER:a COLON sj_gsession_type:b {:
                                         		
		RESULT = parser.nf.SJBranchCaseNode(parser.pos(a, b), new SJLabel(a.getIdentifier()), b);
	
                                          :}
 |  IDENTIFIER:a COLON:b {:
                        		
		RESULT = parser.nf.SJBranchCaseNode(parser.pos(a, b), new SJLabel(a.getIdentifier()), null);
	
                         :};

sj_gsession_type_element ::=
    IDENTIFIER:a MINUS GT IDENTIFIER:b COLON LT sj_gmessage_type:c GT:d {:
                                                                        
		RESULT = parser.nf.SJGMsgNode(parser.pos(a, d), parser.nf.Id(parser.pos(a), a.getIdentifier()), parser.nf.Id(parser.pos(b), b.getIdentifier()), c);
	
                                                                        :}
 |  IDENTIFIER:a COLON LBRACE sj_gbranch_cases:b RBRACE:c {:
                                                         
		RESULT = parser.nf.SJGBranchNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b); 
	
                                                          :}
 |  IDENTIFIER:a COLON LBRACK sj_gsession_type_body:b RBRACK MULT:c {:
                                                                   
		RESULT = parser.nf.SJGLoopNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), b);
	
                                                                    :}
 |  IDENTIFIER:a COLON LBRACK RBRACK MULT:c {:
                                           
		RESULT = parser.nf.SJGLoopNode(parser.pos(a, c), parser.nf.Id(parser.pos(a), a.getIdentifier()), null);
	
                                            :};

sj_branch_cases ::=
    sj_branch_case:a {:
                    
		List l = new TypedList(new LinkedList(), SJBranchCaseNode.class, false);

		l.add(a);
		
		RESULT = l;
	
                     :}
 |  sj_branch_case:a COMMA sj_branch_cases:b {: 
		b.add(a);

		RESULT = b;
	 :};

sj_branch_case ::=
    IDENTIFIER:a COLON sj_session_type:b {:
                                        		
		RESULT = parser.nf.SJBranchCaseNode(parser.pos(a, b), new SJLabel(a.getIdentifier()), b);
	
                                         :}
 |  IDENTIFIER:a COLON:b {:
                        		
		RESULT = parser.nf.SJBranchCaseNode(parser.pos(a, b), new SJLabel(a.getIdentifier()), null);
	
                         :};

sj_message_type_list ::=
    sj_message_type:w {:
                     
        List l = new LinkedList();
        l.add(w); RESULT = l;
    
                      :}
 |  sj_message_type_list:l COMMA sj_message_type:w {:
                                                  
        l.add(w); RESULT = l;
    
                                                   :};

sj_message_type ::=
    type:a {:  
		RESULT = a; 
	 :}
 |  sj_session_type:a {:  
		RESULT = a;
	 :};

sj_try_statement ::=
    TRY:a LPAREN sj_socket_list:b RPAREN block:c catches:d {:
                                                           
		RESULT = parser.nf.SJAmbiguousTry(parser.pos(a, d), c, d, null, b); 
	
                                                           :}
 |  TRY:a LPAREN sj_socket_list:b RPAREN block:c catches_opt:d finally:e {:
                                                                         			
		RESULT = parser.nf.SJAmbiguousTry(parser.pos(a, e), c, d, e, b); 
	
                                                                         :};

sj_basic_operation ::=
    sj_send_operation:a {: 
		RESULT = a;
	 :}
 |  sj_pass_operation:a {: 
		RESULT = a;
	 :}
 |  sj_copy_operation:a {: 
		RESULT = a;
	 :}
 |  sj_recurse_operation:a {: 
		RESULT = a;
	 :};

sj_send_operation ::=
    LT:a sj_socket_list:tgtLst GT DOT SJ_SEND LPAREN argument_list_opt:arg RPAREN:d {:
                                                                                    	
		RESULT = parser.nf.SJSend(parser.pos(a, d), arg, tgtLst); 
	
                                                                                    :};

sj_pass_operation ::=
    LT:a sj_socket_list:b GT DOT SJ_PASS LPAREN argument_list_opt:c RPAREN:d {:
                                                                             	
		RESULT = parser.nf.SJPass(parser.pos(a, d), c, b); 
	
                                                                             :}
 |  LT:a sj_socket_list:b GT DOT SJ_COPY LPAREN argument_list_opt:c RPAREN:d {:
                                                                             	
		RESULT = parser.nf.SJCopy(parser.pos(a, d), c, b); 
	
                                                                             :};

sj_recurse_operation ::=
    LT:a sj_socket_list:b GT DOT SJ_RECURSE LPAREN IDENTIFIER:c RPAREN:d {:
                                                                         	
		RESULT = parser.nf.SJRecurse(parser.pos(a, d), new SJLabel(c.getIdentifier()), b); 
	
                                                                         :};

sj_spawn_operation ::=
    LT:a sj_socket_list:b GT DOT SJ_SPAWN LPAREN class_instance_creation_expression:c RPAREN:d {:
                                                                                               	
		if (!(c instanceof New))
		{
			//throw new SJRuntimeException("[SJParser] Unsupported spawn target: " + c);
			throw new RuntimeException("[SJParser] Unsupported spawn target: " + c);
		}
		
		RESULT = parser.nf.SJSpawn(parser.pos(a, d), (New) c, b); 
	
                                                                                               :};

sj_receive_operation ::=
    name:a DOT SJ_RECEIVE LPAREN argument_list_opt:b RPAREN:c {:
                                                              		
		RESULT = parser.nf.SJReceive(parser.pos(a, c), b, parser.asRecvList(a));
	
                                                              :}
 |  name:a DOT SJ_RECEIVEINT LPAREN argument_list_opt:b RPAREN:c {:
                                                                 		
		RESULT = parser.nf.SJReceiveInt(parser.pos(a, c), b, parser.asRecvList(a));
	
                                                                 :};

sj_receiveboolean_operation ::=
    name:a DOT SJ_RECEIVEBOOLEAN LPAREN argument_list_opt:b RPAREN:c {:
                                                                     		
		RESULT = parser.nf.SJReceiveBoolean(parser.pos(a, c), b, parser.asRecvList(a));
	
                                                                     :};

sj_receivedouble_operation ::=
    name:a DOT SJ_RECEIVEDOUBLE LPAREN argument_list_opt:b RPAREN:c {:
                                                                    		
		RESULT = parser.nf.SJReceiveDouble(parser.pos(a, c), b, parser.asRecvList(a));
	
                                                                    :};

sj_socket_list ::=
    sj_socket:a {:
               
		List sockets = new LinkedList();
		sockets.add(a);
		
		RESULT = sockets;
	
                :}
 |  sj_socket_list:a COMMA sj_socket:b {: 
		a.add(b);
		
		RESULT = a;
	 :};

sj_socket ::=
    name:a {:
          
		RESULT = a.toReceiver();
		//RESULT = a; // So that sj_socket can be used in the method_invocation extension for (single target) session operations.
	
           :};

sj_structural_operation ::=
    sj_outbranch_statement:a {:  RESULT = a;  :}
 |  sj_inbranch_statement:a {:  RESULT = a;  :}
 |  sj_outwhile_statement:a {:  RESULT = a;  :}
 |  sj_newoutwhile_statement:a {:  RESULT = a;  :}
 |  sj_outinwhile_statement:a {:  RESULT = a;  :}
 |  sj_inwhile_statement:a {:  RESULT = a;  :}
 |  sj_recursion_statement:a {:  RESULT = a;  :}
 |  sj_typecase_statement:a {:  RESULT = a;  :};

sj_outbranch_statement ::=
    LT:a sj_socket_list:b GT DOT SJ_OUTBRANCH LPAREN IDENTIFIER:c RPAREN block:d {:
                                                                                 
		RESULT = parser.nf.SJOutbranch(parser.pos(a, d), d.statements(), new SJLabel(c.getIdentifier()), b); 
	
                                                                                 :}
 |  name:a DOT SJ_OUTBRANCH LPAREN IDENTIFIER:b RPAREN block:c {:
                                                               
		RESULT = parser.nf.SJOutbranch(parser.pos(a, c), c.statements(),
		            new SJLabel(b.getIdentifier()), parser.asRecvList(a));
	
                                                               :};

sj_inbranch_statement ::=
    name:a DOT SJ_INBRANCH LPAREN argument_list_opt:b RPAREN LBRACE sj_inbranch_cases:c RBRACE:d {:
                                                                                                 
		RESULT = parser.nf.SJInbranch(parser.pos(a, d), b, c, parser.asRecvList(a)); // Hacked position, for when no cases.
	
                                                                                                 :};

sj_inbranch_cases ::=
    sj_inbranch_case:a {:
                       // TypedList is a legacy approximation to generics.
		List l = new TypedList(new LinkedList(), SJInbranchCase.class, false);
		l.add(a);
		RESULT = l; 
	
                       :}
 |  sj_inbranch_cases:a sj_inbranch_case:b {:  
		a.add(b);
		RESULT = a; 
	 :};

sj_inbranch_case ::=
    CASE:a IDENTIFIER:b COLON block_statements_opt:c {:
                                                     
		RESULT = parser.nf.SJInbranchCase(parser.pos(a, c), c, new SJLabel(b.getIdentifier()));
	
                                                     :};

sj_outwhile_statement ::=
    LT:a sj_socket_list:b GT DOT SJ_OUTWHILE LPAREN expression:c RPAREN statement:d {:
                                                                                    
		RESULT = parser.nf.SJOutwhile(parser.pos(a, d), c, d, b); 
	
                                                                                    :}
 |  name:a DOT SJ_OUTWHILE LPAREN expression:b RPAREN statement:c {:
                                                                  
		RESULT = parser.nf.SJOutwhile(parser.pos(a, c), b, c, parser.asRecvList(a));
	
                                                                  :};

sj_newoutwhile_statement ::=
    LT:a sj_socket_list:b GT DOT SJ_NEWOUTWHILE LPAREN expression:c RPAREN statement:d {:
                                                                                      
		RESULT = parser.nf.SJNewOutwhile(parser.pos(a, d), c, d, b);
	
                                                                                       :}
 |  name:a DOT SJ_NEWOUTWHILE LPAREN expression:b RPAREN statement:c {:
                                                                    
		RESULT = parser.nf.SJNewOutwhile(parser.pos(a, c), b, c, parser.asRecvList(a));
	
                                                                     :};

sj_outinwhile_statement ::=
    LT:lt sj_socket_list:tgtLst GT DOT SJ_OUTWHILE LPAREN name:src DOT SJ_INWHILE LPAREN RPAREN RPAREN statement:body {:
                                                                                                                     
	    RESULT = parser.nf.SJOutInwhile(parser.pos(lt, body), body, parser.asRecvList(src), tgtLst, null);
	
                                                                                                                      :}
 |  name:tgt DOT SJ_OUTWHILE LPAREN name:src DOT SJ_INWHILE LPAREN RPAREN RPAREN statement:body {:
                                                                                               
		RESULT = parser.nf.SJOutInwhile(parser.pos(tgt, body), body, parser.asRecvList(src), parser.asRecvList(tgt), null);
	
                                                                                                :}
 |  name:tgt DOT SJ_OUTWHILE LPAREN name:src DOT SJ_INWHILE LPAREN RPAREN SEMICOLON expression:cond RPAREN statement:body {:
                                                                                                                         
        RESULT = parser.nf.SJOutInwhile(parser.pos(tgt, body), body, parser.asRecvList(src), parser.asRecvList(tgt), cond);
    
                                                                                                                          :}
 |  LT:lt sj_socket_list:tgtLst GT DOT SJ_OUTWHILE LPAREN name:src DOT SJ_INWHILE LPAREN RPAREN SEMICOLON expression:cond RPAREN statement:body {:
                                                                                                                                               
        RESULT = parser.nf.SJOutInwhile(parser.pos(lt, body), body, parser.asRecvList(src), tgtLst, cond);
    
                                                                                                                                                :}
 |  LT:lt sj_socket_list:tgtLst GT DOT SJ_OUTWHILE LPAREN LT sj_socket_list:srcLst GT DOT SJ_INWHILE LPAREN RPAREN RPAREN statement:body {:
                                                                                                                                        
        RESULT = parser.nf.SJOutInwhile(parser.pos(lt, body), body, srcLst, tgtLst, null);
    
                                                                                                                                         :}
 |  name:tgt DOT SJ_OUTWHILE LPAREN LT sj_socket_list:srcLst GT DOT SJ_INWHILE LPAREN RPAREN RPAREN statement:body {:
                                                                                                                  
        RESULT = parser.nf.SJOutInwhile(parser.pos(tgt, body), body, srcLst, parser.asRecvList(tgt), null);
    
                                                                                                                   :}
 |  LT:lt sj_socket_list:tgtLst GT DOT SJ_OUTWHILE LPAREN LT sj_socket_list:srcLst GT DOT SJ_INWHILE LPAREN RPAREN SEMICOLON expression:cond RPAREN statement:body {:
                                                                                                                                                                  
        RESULT = parser.nf.SJOutInwhile(parser.pos(lt, body), body, srcLst, tgtLst, cond);
    
                                                                                                                                                                   :}
 |  name:tgt DOT SJ_OUTWHILE LPAREN LT sj_socket_list:srcLst GT DOT SJ_INWHILE LPAREN RPAREN SEMICOLON expression:cond RPAREN statement:body {:
                                                                                                                                            
        RESULT = parser.nf.SJOutInwhile(parser.pos(tgt, body), body, srcLst, parser.asRecvList(tgt), cond);
    
                                                                                                                                             :};

sj_inwhile_statement ::=
    LT:lt sj_socket_list:tgtLst GT DOT SJ_INWHILE LPAREN argument_list_opt:b RPAREN statement:body {:
                                                                                                   
		RESULT = parser.nf.SJInwhile(parser.pos(lt, body), body, tgtLst, b);
	
                                                                                                   :}
 |  name:tgt DOT SJ_INWHILE LPAREN argument_list_opt:b RPAREN statement:body {:
                                                                             
		RESULT = parser.nf.SJInwhile(parser.pos(tgt, body), body, parser.asRecvList(tgt), b);
	
                                                                             :};

sj_recursion_statement ::=
    LT:a sj_socket_list:b GT DOT SJ_RECURSION LPAREN IDENTIFIER:c RPAREN block:d {:
                                                                                
		RESULT = parser.nf.SJRecursion(parser.pos(a, d), d, new SJLabel(c.getIdentifier()), b);
	
                                                                                 :}
 |  name:a DOT SJ_RECURSION LPAREN IDENTIFIER:b RPAREN block:c {:
                                                              
		RESULT = parser.nf.SJRecursion(parser.pos(a, c), c, new SJLabel(b.getIdentifier()), parser.asRecvList(a));
	
                                                               :};

sj_typecase_statement ::=
    SJ_TYPECASE:t LPAREN name:socket RPAREN LBRACE sj_typecase_caselist:l RBRACE:end {:
                                                                                    
        RESULT = parser.nf.SJTypecase(parser.pos(t,end), socket, l);
    
                                                                                     :};

sj_typecase_caselist ::=
    sj_typecase_when:w {:
                      
        List l = new LinkedList();
        l.add(w); RESULT = l;
    
                       :}
 |  sj_typecase_caselist:l sj_typecase_when:w {:
                                             
        l.add(w); RESULT = l;
    
                                              :};

sj_typecase_when ::=
    SJ_WHEN:w LPAREN sj_session_type:t RPAREN statement:body {:
                                                            
        RESULT = parser.nf.SJWhen(parser.pos(w,body), t, body);
    
                                                             :};

sj_session_type_cast_expression ::=
    LPAREN:a sj_channel_type:b RPAREN method_invocation:c {:
                                                          
		RESULT = parser.nf.SJChannelCast(parser.pos(a, c), c, b);
		// FIXME: protocol references to channel types will be incorrectly parsed as session type bodies.
		// (Currently dealt with by disallowing protocol references to channel types).
		// So maybe better to have a manual SJ parse pass for session casts and formals before base type checking.
		// But this might be difficult - somehow need session type information first. Then maybe
		// use a SJServiceSocketHack style hack. Old SJ didn't have this problem because used inactive session sockets. 
	
                                                          :}
 |  LPAREN:a sj_session_type_body:type RPAREN method_invocation:m {:
                                                                  
		if (type instanceof SJProtocolNode)
		{
			RESULT = parser.nf.SJAmbiguousCast(parser.pos(a, m), m, type);
		}
		else
		{
			RESULT = parser.nf.SJSessionCast(parser.pos(a, m), m, type);
		}
	
                                                                  :}
 |  LPAREN:a sj_session_set_type:set RPAREN method_invocation:m {:
                                                               
        RESULT = parser.nf.SJSessionCast(parser.pos(a,m), m, set);
    
                                                                :};

sj_formal ::=
    sj_channel_formal:a {: 
		RESULT = a;
	 :}
 |  sj_session_formal:a {: 
		RESULT = a;
	 :}
 |  sj_server_formal:a {:  RESULT = a;  :};

sj_channel_formal ::=
    FINAL:a SJ_NOALIAS sj_channel_type:b variable_declarator_id:c {:
                                                                  
		RESULT = parser.nf.SJChannelFormal(parser.pos(a, c), Flags.FINAL, c.name, b);
	
                                                                  :};

sj_session_formal ::=
    SJ_NOALIAS:a sj_session_type_body:b variable_declarator_id:c {:
                                                                 
		RESULT = parser.nf.SJSessionFormal(parser.pos(a, c), Flags.NONE, c.name, b);
	
                                                                 :}
 |  FINAL:a SJ_NOALIAS sj_session_type_body:b variable_declarator_id:c {:
                                                                       
		RESULT = parser.nf.SJSessionFormal(parser.pos(a, c), Flags.FINAL, c.name, b); 
	
                                                                       :};

sj_server_formal ::=
    SJ_NOALIAS:a sj_server_type:t variable_declarator_id:v {:
                                                          
        RESULT = parser.nf.SJServerFormal(parser.pos(a,v), Flags.NONE, v.name, t);
    
                                                           :}
 |  FINAL:a SJ_NOALIAS sj_server_type:t variable_declarator_id:v {:
                                                                
        RESULT = parser.nf.SJServerFormal(parser.pos(a,v), Flags.FINAL, v.name, t);
    
                                                                 :};


