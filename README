STING - An Optimizing Session Type Compiler for Java
----------------------------------------------------

STING is an optimizing session type compiler for Java from Purdue University.
STING is an extension of sessionj (http://code.google.com/p/sessionj/) from
Imperial College London. This implementation uses Polyglot compiler framework
(http://www.cs.cornell.edu/projects/polyglot/) and Javaflow continuation library
(http://commons.apache.org/sandbox/javaflow/).

For more information on STING compiler, please refer to our paper "Efficient
Session Type Guided Distributed Interaction"
(http://www.springerlink.com/content/d3g7075p44904406/).

BUILDING
--------

Switch to trunk directory and run
> ant jar
to build the source. You need Apache Ant and a Java 1.6 JDK for that.

COMPILING SJ PROGRAMS AND RUNNING THEM

1. Add the bin/ directory to your path.
2. Write an SJ program, say Foo.sj.
3. Compile it using:
> sessionjc Foo.sj [-cp a classpath if needed] [-d destination for generated .java and .class files]
4. Run with:
> sessionj Foo

TEST PROGRAMS:
-------------
- All our test files are under the directory of tests/src/purdue
- We mainly have three test sets: batching, continuation exporting, and chaining.
- To run any test, first you need to build the compiler and the runtime by
  typing "ant jar" on the root directory. Then, compile and run the sj files as
  described within each file.
